name: Release Feature Branch Automatically
run-name: dp-dp-nxtleap-rebase
on:
    workflow_dispatch:
jobs:
    fetch-branches:
      runs-on: ubuntu-latest
      outputs:
        branches: ${{ steps.get-branches.outputs.branches }}
      
      steps:
          - name: Checkout repository
            uses: actions/checkout@v2
            with:
              token: ${{ secrets.GITHUB_TOKEN }}

          - name: Update remote references and fetch
            run: |
              git remote set-head origin --auto
              git fetch --all --prune
        
          - name: List branches
            run: |
              git branch -r
      
          - name: Get all branches except develop and main
            id: get-branches
            run: |
              DEFAULT_BRANCH=develop 
              BRANCHES=$(git branch -r | grep -vE "origin/($DEFAULT_BRANCH|main|HEAD)" | sed 's@^ *origin/@@')
              echo "$BRANCHES" 
      
              if [ -z "$BRANCHES" ]; then
                echo "If No branches are found then exit."
                exit 1 
              fi

              BRANCH_SEPERATED=$(echo $BRANCHES | tr ' \n' ',' | sed 's/,$//')
              echo "$BRANCH_SEPERATED"
              BRANCH_LIST=$(echo $BRANCH_SEPERATED | jq -R -s -c 'split(",") | map(gsub("^[[:space:]]+|[[:space:]]+$";"")) | map(select(length > 0))' | sed 's/\\n//g')
              echo "Branches List: $BRANCH_LIST" 
              echo "branches=$BRANCH_LIST" >> $GITHUB_OUTPUT

    rebase-branches:
      needs: fetch-branches
      runs-on: ubuntu-latest
      strategy:
        matrix:
          branch: ${{ fromJSON(needs.fetch-branches.outputs.branches) }}
          
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.GITHUB_TOKEN }}


        # - name: Update remote references and fetch
        #   run: |
        #     git remote set-head origin --auto
        #     git fetch --all

        - name: List branches
          run: |
            git branch -r
        
        - name: Print just names
          run: |
            echo "Finding exact parent branch for ${{ matrix.branch }}..."
         
            PARENT_BRANCH=""
            CLOSEST_MERGE_BASE=""

            # Fetch all remote branches
            git fetch origin ${{ matrix.branch }}:${{ matrix.branch }}

            # Loop through all branches and find the closest merge base
            for BRANCH in $(git for-each-ref --format '%(refname:short)' refs/remotes/origin); do
              if [ "$BRANCH" != "origin/${{ matrix.branch }}" ]; then
                MERGE_BASE=$(git merge-base ${{ matrix.branch }} $BRANCH)

                # Check if the current branch is the closest match
                if [ -z "$CLOSEST_MERGE_BASE" ] || [ "$(git rev-list --count $MERGE_BASE..${{ matrix.branch }})" -lt "$(git rev-list --count $CLOSEST_MERGE_BASE..$CURRENT_BRANCH)" ]; then
                  CLOSEST_MERGE_BASE=$MERGE_BASE
                  PARENT_BRANCH=$BRANCH
                fi
              fi
            done

            # Output the parent branch
            echo "Immediate parent branch is: $PARENT_BRANCH"
            echo "parent-branch=$PARENT_BRANCH" >> $GITHUB_ENV
  # git fetch origin
  # git reset --hard origin/develop
  # git clean -f -d
  # git checkout ${{ matrix.branch }}
  # PARENT_BRANCH=$(git show-branch -a | sed "s/].*//" | grep "\*" | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -n1 | sed "s/^.*\[//")
  # echo "parent_branch: $PARENT_BRANCH"
