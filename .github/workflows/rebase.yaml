name: Release Feature Branch Automatically
run-name: dp-dp-nxtleap-rebase
on:
    workflow_dispatch:
jobs:
    fetch-branches:
      runs-on: ubuntu-latest
      outputs:
        branches: ${{ steps.get-branches.outputs.branches }}
      
      steps:
          - name: Checkout repository
            uses: actions/checkout@v2
            with:
              token: ${{ secrets.GITHUB_TOKEN }}

          - name: Update remote references and fetch
            run: |
              git remote set-head origin --auto
              git fetch --all --prune
        
          - name: List branches
            run: |
              git branch -r
      
          - name: Get all branches except develop and main
            id: get-branches
            run: |
              DEFAULT_BRANCH=develop 
              BRANCHES=$(git branch -r | grep -vE "origin/($DEFAULT_BRANCH|main|HEAD)" | sed 's@^ *origin/@@')
              echo "$BRANCHES" 
      
              if [ -z "$BRANCHES" ]; then
                echo "If No branches are found then exit."
                exit 1 
              fi

              BRANCH_SEPERATED=$(echo $BRANCHES | tr ' \n' ',' | sed 's/,$//')
              echo "$BRANCH_SEPERATED"
              BRANCH_LIST=$(echo $BRANCH_SEPERATED | jq -R -s -c 'split(",") | map(gsub("^[[:space:]]+|[[:space:]]+$";"")) | map(select(length > 0))' | sed 's/\\n//g')
              echo "Branches List: $BRANCH_LIST" 
              echo "branches=$BRANCH_LIST" >> $GITHUB_OUTPUT

    rebase-branches:
      needs: fetch-branches
      runs-on: ubuntu-latest
      strategy:
        matrix:
          branch: ${{ fromJSON(needs.fetch-branches.outputs.branches) }}
          
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.GITHUB_TOKEN }}

        - name: Fetch all branches
          run: |
            echo "Fetching all remote branches..."
            git fetch --all --prune
    
        - name: Verify branch existence
          run: |
            echo "Verifying branch existence..."
            if ! git show-ref --verify --quiet refs/remotes/origin/${{ matrix.branch }}; then
              echo "Branch 'origin/${{ matrix.branch }}' does not exist. Exiting..."
              exit 1
            fi

        - name: List branches
          run: |
            git branch -r

        # - name: Debug merge base
        #   run: |
        #     echo "Debugging merge base for develop branch..."
        #     echo "Commit history for ${{ matrix.branch }}:"
        #     git log --oneline -5 refs/remotes/origin/${{ matrix.branch }}
        
        #     echo "Commit history for develop:"
        #     git log --oneline -5 refs/remotes/origin/develop
        
        #     echo "Trying to find common ancestors manually..."
        #     git rev-list --all | grep $(git rev-parse refs/remotes/origin/develop)
        #     git rev-list --all | grep $(git rev-parse refs/remotes/origin/${{ matrix.branch }})
        
        #     echo "Finding merge base directly..."
        #     git merge-base refs/remotes/origin/${{ matrix.branch }} refs/remotes/origin/develop
        
        - name: Print just names
          run: |
            echo "Finding exact parent branch for ${{ matrix.branch }}..."

            PARENT_BRANCH=""
            CLOSEST_MERGE_BASE=""

            # Explicitly reference the remote branch
            TARGET_BRANCH="refs/remotes/origin/${{ matrix.branch }}"

            # Loop through all remote branches and find the closest merge base
            echo "Iterating through remote branches..."
            for BRANCH in $(git for-each-ref --format '%(refname:short)' refs/remotes/origin); do
              echo "Checking branch: $BRANCH"
              if [ "$BRANCH" != "${{ matrix.branch }}" ]; then
                # Check if either branch is 'develop' and handle accordingly
                if [ "$BRANCH" = "origin/develop" ] || [ "$TARGET_BRANCH" = "refs/remotes/origin/develop" ]; then
                  echo "Special handling for 'develop' branch..."
                  MERGE_BASE=$(git merge-base $TARGET_BRANCH refs/remotes/origin/develop) || { echo "Failed to find merge base with develop"; continue; }
                else
                  echo "Calculating merge base between $TARGET_BRANCH and $BRANCH..."
                  MERGE_BASE=$(git merge-base $TARGET_BRANCH $BRANCH) || { echo "Failed to find merge base with $BRANCH"; continue; }
                fi
                echo "Calculating merge base between $TARGET_BRANCH and $BRANCH..."
                # Calculate merge base based on commit timestamps
                TIMESTAMP_TARGET=$(git log -1 --format="%ct" $TARGET_BRANCH)
                TIMESTAMP_BRANCH=$(git log -1 --format="%ct" $BRANCH)
                if [ "$TIMESTAMP_TARGET" -gt "$TIMESTAMP_BRANCH" ]; then
                    MERGE_BASE=$(git log -1 --format="%H" $TARGET_BRANCH)
                else
                    MERGE_BASE=$(git log -1 --format="%H" $BRANCH)
                fi

                # Check if the current branch is the closest match
                if [ -z "$CLOSEST_MERGE_BASE" ] || [ "$(git rev-list --count $MERGE_BASE..$TARGET_BRANCH)" -lt "$(git rev-list --count $CLOSEST_MERGE_BASE..$TARGET_BRANCH)" ]; then
                  CLOSEST_MERGE_BASE=$MERGE_BASE
                  PARENT_BRANCH=$BRANCH
                fi
              fi
            done

            if [ -z "$PARENT_BRANCH" ]; then
              echo "No parent branch found. Exiting with error."
              exit 1
            fi

            # Output the parent branch
            echo "Immediate parent branch is: $PARENT_BRANCH"
            echo "parent-branch=$PARENT_BRANCH" >> $GITHUB_ENV
# echo "Finding exact parent branch for ${{ matrix.branch }}..."

# PARENT_BRANCH=""
# CLOSEST_MERGE_BASE=""

# # Explicitly reference the remote branch
# TARGET_BRANCH="refs/remotes/origin/${{ matrix.branch }}"

# # Loop through all remote branches and find the closest merge base
# echo "Iterating through remote branches..."
# for BRANCH in $(git for-each-ref --format '%(refname:short)' refs/remotes/origin); do
#   echo "Checking branch: $BRANCH"
#   if [ "$BRANCH" != "origin/${{ matrix.branch }}" ]; then
#     if [ "$BRANCH" = "origin/develop" ] || [ "$TARGET_BRANCH" = "refs/remotes/origin/develop" ]; then
#       echo "Special handling for 'develop' branch..."
#       MERGE_BASE=$(git merge-base $TARGET_BRANCH origin/develop) || { echo "_--_Failed to find merge base with develop"; continue; }
#     else
#       echo "Calculating merge base between $TARGET_BRANCH and $BRANCH..."
#       MERGE_BASE=$(git merge-base $TARGET_BRANCH $BRANCH) || { echo "Failed to find merge base with $BRANCH"; continue; }
#     fi

#     # Check if the current branch is the closest match
#     if [ -z "$CLOSEST_MERGE_BASE" ] || [ "$(git rev-list --count $MERGE_BASE..$TARGET_BRANCH)" -lt "$(git rev-list --count $CLOSEST_MERGE_BASE..$TARGET_BRANCH)" ]; then
#       CLOSEST_MERGE_BASE=$MERGE_BASE
#       PARENT_BRANCH=$BRANCH
#     fi
#   fi
# done

# if [ -z "$PARENT_BRANCH" ]; then
#   echo "No parent branch found. Exiting with error."
#   exit 1
# fi

# # Output the parent branch
# echo "Immediate parent branch is: $PARENT_BRANCH"
# echo "parent-branch=$PARENT_BRANCH" >> $GITHUB_ENV
  # git fetch origin
  # git reset --hard origin/develop
  # git clean -f -d
  # git checkout ${{ matrix.branch }}
  # PARENT_BRANCH=$(git show-branch -a | sed "s/].*//" | grep "\*" | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -n1 | sed "s/^.*\[//")
  # echo "parent_branch: $PARENT_BRANCH"
