name: Release Feature Branch Automatically
run-name: dp-dp-nxtleap-rebase
on:
    workflow_dispatch:
jobs:
    fetch-branches:
      runs-on: ubuntu-latest
      outputs:
        branches: ${{ steps.get-branches.outputs.branches }}
      
      steps:
          - name: Checkout repository
            uses: actions/checkout@v2
            with:
              token: ${{ secrets.GITHUB_TOKEN }}

          - name: Update remote references and fetch
            run: |
              git remote set-head origin --auto
              git fetch --all --prune
        
          - name: List branches
            run: |
              git branch -r
      
          - name: Get all branches except develop and main
            id: get-branches
            run: |
              DEFAULT_BRANCH=develop 
              BRANCHES=$(git branch -r | grep -vE "origin/($DEFAULT_BRANCH|main|HEAD)" | sed 's@^ *origin/@@')
              echo "$BRANCHES" 
      
              if [ -z "$BRANCHES" ]; then
                echo "If No branches are found then exit."
                exit 1 
              fi

              BRANCH_SEPERATED=$(echo $BRANCHES | tr ' \n' ',' | sed 's/,$//')
              echo "$BRANCH_SEPERATED"
              BRANCH_LIST=$(echo $BRANCH_SEPERATED | jq -R -s -c 'split(",") | map(gsub("^[[:space:]]+|[[:space:]]+$";"")) | map(select(length > 0))' | sed 's/\\n//g')
              echo "Branches List: $BRANCH_LIST" 
              echo "branches=$BRANCH_LIST" >> $GITHUB_OUTPUT

    rebase-branches:
      needs: fetch-branches
      runs-on: ubuntu-latest
      strategy:
        matrix:
          branch: ${{ fromJSON(needs.fetch-branches.outputs.branches) }}
          
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Print just names
          run: |
            BRANCH=$(echo "${{ matrix.branch }}" | sed 's/[[:space:]]*$//')
            echo "branch: $BRANCH"
            POTENTIAL_PARENTS=$(git for-each-ref --format='%(refname:short)' refs/heads/ | grep -v "^$CURRENT_BRANCH$")

            # Find the most recent common ancestor for each potential parent branch
            BEST_PARENT=""
            BEST_BASE=""
            for PARENT in $POTENTIAL_PARENTS; do
              MERGE_BASE=$(git merge-base $CURRENT_BRANCH $PARENT)
              echo "Common ancestor of $CURRENT_BRANCH and $PARENT is $MERGE_BASE"

              # Initialize or update the best parent branch
              if [ -z "$BEST_BASE" ] || git log --oneline $MERGE_BASE..$CURRENT_BRANCH | grep -q '.'; then
                BEST_PARENT=$PARENT
                BEST_BASE=$MERGE_BASE
              fi
            done

            if [ -z "$BEST_PARENT" ]; then
              echo "No parent branch found for $CURRENT_BRANCH"
              exit 1
            else
              echo "Best parent branch for $CURRENT_BRANCH is $BEST_PARENT"
              echo "parent_branch=$BEST_PARENT" >> $GITHUB_ENV
            fi
# PARENT_BRANCH=$(git log --pretty=%P -n 1 origin/$BRANCH | awk '{print $1}')
# PARENT_BRANCH_NAME=$(git branch -r --contains $PARENT_BRANCH | grep -vE "origin/(${BRANCH}|develop|main)" | sed 's@^ *origin/@@' | head -n 1)

# echo "Detected parent branch for $BRANCH: $PARENT_BRANCH_NAME"

# 
# git checkout $BRANCH
# PARENT_BRANCH = $(git show-branch | grep '*' | grep -v "$(git rev-parse --abbrev-ref HEAD)" | head -n1 | sed 's/.*\[\(.*\)\].*/\1/' | sed 's/[\^~].*//')
# echo "parent_branch: $PARENT_BRANCH"


